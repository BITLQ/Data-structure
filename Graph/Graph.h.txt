//图的相关知识
//邻接矩阵和邻接表的存储方式
//图的遍历，深度优先遍历，广度优先遍历；
//构造最小生成树的方法，Kruskal算法和Prim算法，这两个算法都采用逐步求解的贪心算法策略
//克鲁斯卡尔利用到了并查集解决判环问题（多个集合），普里姆利用最小堆和一个集合数组（两个集合）
//局部最优；


//注意，这里有向图的五向图的区别；
//第一种存储方式，邻接矩阵；

//#include<iostream>
//
//using namespace std;

//template<class V,class W>
//class GraphMartix
//{
//public:
//	GraphMartix( V* arr, size_t size,bool isDirection = false )
//		:_size(size)
//		,_isDirection(isDirection)
//	{
//		_vartix = new V[_size];    // 为顶点开辟空间
//		_martix = new W_size]   // 为邻接矩阵开辟空间
//
//		for(size_t i = 0; i < _size; ++i)
//		{
//			_martix[i] = new W[_size];
//			_vartix[i] = arr[i];
//		}
//
//		for(szie_t i = 0; i < _size; ++i)
//		{
//			for(size_t j = 0; j < _size; ++j)
//			{
//				_martix[i][j] = 0;   //邻接矩阵的初始化
//			}
//		}
//	}
//
//	//析构函数
//	~GraphMartix(()
//	{
//		delete[] _vartix;
//
//		//注意二维数组的释放
//		for(szie_t i = 0; i < _size; ++i)
//		{
//			delete[] _martix[i];
//		}
//
//		delete[] _martix;
//	}
//
//	void AddEdge(const V& src, const V& dest,const W& w)   //添加边,w为权值
//	{
//		size_t srcIndex = _GetIndex(src);
//		size_t destIndex = _GetIndex(dest);
//
//		//这时候就得区分一下有向图和无向图；
//
//		if(_isDirection)
//			_martix[srcIndex][destIndex] = w;
//		else
//		{
//			//无向图两个方向都得修改
//			_martix[srcIndex][destIndex] = w;
//			_martix[destIndex][srcIndex] = w;
//		}
//	}
//
//protected:
//	size_t _GetIndex(const V& v)
//	{
//		for(size_t i =0; i < _size; ++i)
//		{
//			if(_vartix[i] == v)
//				return i;
//		}
//		//抛出异常，注意调用时的异常处理
//		throw std::invalid_argument("给定的结点错误"); 
//	}
//
//private:
//	V* _vartix;    // 存放顶点的数组
//	W** _martix;   // 存放边的矩阵
//	size_t _size;  //定点的个数
//	bool _isDirection;  //判断是有/无向图  _isDirection == false 代表无向图
//};


//邻接表的存储方式

#include<iostream>
#include<vector>
#include<queue>

using namespace std;

template<class V,class W>
struct GraphNode
{
	size_t _src;
	size_t _dest;
	W _w;
	GraphNode<V,W>* _next;

	GraphNode(const size_t src,const size_t dest, const W w)
		:_src(src)
		,_dest(dest)
		,_w(w)
		,_next(NULL)
	{}
};


template<class V,class W>
class GraphLink
{
public:
	typedef GraphNode<V,W> Node;

	GraphLink(V* arr,const size_t size, int isDirection = -1)
		:_isDirection(isDirection)
	{
		_vartix.resize(size);
		_edgetable.resize(size);
		_vistied.resize(size);
		//初始化顶点数组；
		for(size_t i = 0; i < size; ++i)
		{
			_vartix[i] = arr[i];
			_edgetable[i] = NULL;
			_vistied[i] = 0;
		}
	}

	//析构函数
	~GraphLink()
	{}

	//添加边
	void AddEdge(const V& src, const V& dest, W w)
	{
		int srcIndex = _GetIndex(src);
		int destIndex = _GetIndex(dest);
		
		_AddEdge(srcIndex,destIndex,w);

		if(_isDirection == -1)
			_AddEdge(destIndex,srcIndex,w);

	}

	//DFS  深度优先遍历
	void DFS(const V& v)
	{
		int index = _GetIndex(v);
		_DFS(_vartix[index],_vistied);

		for(int i = 0; i < _vartix.size(); ++i)
		{
			if(_vistied[i] == 0)      // 0代表当前顶点没有被访问过 
				_DFS(_vartix[i],_vistied);
		}
		for(int i = 0; i < _vistied.size(); ++i)
			_vistied[i] = 0;
		cout<<"endl"<<endl;
	}

	//广度优先遍历
	void BFS(const V& v)
	{
		//采用队列的方式
		queue<int> q;
		int index = _GetIndex(v);
		q.push(index);
		_vistied[index] = 1;  //标记为访问过

		while(!q.empty())
		{
			cout<<_vartix[q.front()]<<"->";
			
			Node* cur = _edgetable[q.front()];

			while(cur)
			{
				if(_vistied[cur->_dest] == 0)//判断是否访问过
				{	
					q.push(cur->_dest);
					_vistied[cur->_dest] = 1;  //入队列就标记为访问过，防止重复入队列；
				}
				cur = cur->_next;
			}
			q.pop();
		}

		//遍历完将状态标记全部置为0；
		for(int i = 0; i < _vistied.size(); ++i)
			_vistied[i] = 0;
		cout<<"endl"<<endl;
	}

protected:
	void _DFS(const V& v, vector<int>& _vistied)
	{
		int index = _GetIndex(v);
		Node* cur = _edgetable[index];

		cout<<_vartix[index]<<"->";
		_vistied[index] = 1;
		while(cur)
		{
			if(_vistied[cur->_dest] == 0)
				_DFS(_vartix[cur->_dest],_vistied);
				cur = cur->_next;
		}
	}

	//添加边
	void _AddEdge(size_t src,size_t dest,W w)
	{
		Node* newNode = new Node(src,dest,w);
		newNode->_next =  _edgetable[src];
		_edgetable[src] = newNode;
	}

	//获取顶点所在下标
	int _GetIndex(const V& v)
	{
		for(size_t i = 0; i < _vartix.size(); ++i)
		{
			if(_vartix[i] == v)
				return i;
		}
		//抛出异常，注意调用时的异常处理
		throw std::invalid_argument("给定的结点错误");
	}

public:
	//类似于解决哈西冲突的拉链法
	vector<int> _vistied; //因为存在不是连通图的关系，所以需要一个状态数组，保证图的每个顶点都被访问；

	vector<V> _vartix;
	vector<Node*> _edgetable;
	int _isDirection;
	//bool _isDirection;  为什么无论怎么都是ture;
};
