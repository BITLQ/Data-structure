//3. 判断一棵树是否是完全二叉树
#include<iostream>
#include<queue>

using namespace std;

//完全二叉树：
//若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，
//第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。

//采用层序遍历的方法求解

struct Node
{
	int _data;
	Node* _left;
	Node* _right;

	Node(const int& data):_data(data),_left(NULL),_right(NULL){}
};

class BinaryTree
{
	Node* _root;
public:
	BinaryTree(int* arr,size_t size)
	{
		int index = 0;
		_root = _GreatTree(arr,size,'#',index);
	}

	//前序递归建树
	Node* _GreatTree(int* arr, int size,int invalid, int& index)
	{
		Node* root = NULL;
		if(index < size && arr[index] != invalid)
		{
			root = new Node(arr[index]);
			root->_left = _GreatTree(arr,size,invalid,++index);
			root->_right = _GreatTree(arr,size,invalid,++index);
		}
		return root;
	}

	//判断是否是一颗完全二叉树
	bool IsCompleteTree()
	{
		return IsCompleteTreeTwo(_root);
		//return IsCompleteTree(_root);
	}

protected:
	//方式一
	bool IsCompleteTree(Node* root)
	{
		if(root == NULL)
			return false;
		//用到辅助内存队列
		queue<Node*> q;
		q.push(root);
		
		//先将所有的节点以及它们的左右节点入队列
		Node* cur = q.front();
		while(cur) //如果遇到第一个空节点停止
		{
			q.push(cur->_left);
			q.push(cur->_right);
			q.pop();
			
			cur = q.front();
		}
		//此时应该是完全二叉树的结尾；
		//此时正确的情况应该是队列中的所有元素都是NULL，否则不是完全二叉树
		while(!q.empty())
		{
			if(q.front() != NULL)
				return false;
			q.pop();
		}
		return true;
	}

	//方式二     
	//这个问题的描述已经提示了解法，采用广度优先遍历，从根节点开始，入队列，如果队列不为空，循环。
	//遇到第一个没有左儿子或者右儿子的节点,设置标志位,如果之后再遇到有左/右儿子的节点，
	//那么这不是一颗完全二叉树。

	bool IsCompleteTreeTwo(Node* root)
	{
		queue<Node*> q;
		q.push(root);
		Node* cur = q.front();
		int flag = 0;

		while(cur)
		{
			if(cur->_left == NULL && cur->_right != NULL)
				return false;

			if(flag == 1 && (cur->_left != NULL || cur->_right != NULL))
				return false;

			if(cur->_left == NULL || cur->_right == NULL)
				flag = 1;

			if(cur->_left != NULL)
				q.push(cur->_left);
			if(cur->_right != NULL)
				q.push(cur->_right);

			q.pop();
			if(!q.empty())
				cur = q.front();
			else
				cur = NULL;
		}
		return true;
	}
};


int main()
{
	int arr[] = {1,2,3,'#','#',4,'#','#',5,6,'#','#','#'};
	BinaryTree b(arr,13);

	/*int arr[] = {1,2,3,'#','#','#',5,6,'#','#','#'};
	BinaryTree b(arr,11);*/

	cout<<b.IsCompleteTree()<<endl;

	system("pause");
	return 0;
}