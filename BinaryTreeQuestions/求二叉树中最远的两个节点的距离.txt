1. 求二叉树中最远的两个节点的距离

#include<iostream>

using namespace std;

//先建一颗二叉树
struct Node
{
	int _data;
	Node* _left;
	Node* _right;

	Node(const int& data):_data(data),_left(NULL),_right(NULL){}
};

class BinaryTree
{
	Node* _root;
public:
	BinaryTree(int* arr,size_t size)
	{
		int index = 0;
		_root = _GreatTree(arr,size,'#',index);
	}


	//前序递归建树
	Node* _GreatTree(int* arr, size_t size,int invalid, int& index)
	{
		Node* root = NULL;
		if(index < size && arr[index] != invalid)
		{
			root = new Node(arr[index]);
			root->_left = _GreatTree(arr,size,invalid,++index);
			root->_right = _GreatTree(arr,size,invalid,++index);
		}
		return root;
	}

	//求二叉树最远两个节点的距离
	void MaxDistant()
	{
		//利用递归不断的往回带
		int maxlenth = 0;//最远距离
	
		//顺带求了一下树的深度
		cout<<_MaxDistance(_root,maxlenth)<<endl;

		//最后比较到根节点，输出最远距离
		cout<<maxlenth<<endl;
	}

protected://保护实现细节
	int _MaxDistance(Node* root, int& maxlenth)
	{
		if(root == NULL)
			return 0;//表示到了叶子节点

		int leftDepth = _MaxDistance(root->_left,maxlenth);//左子树深度
		int rightDepth = _MaxDistance(root->_right,maxlenth);//右子树深度

		//当前节点的深度即左右子树最大的深度的基础上+1；
		int depth = leftDepth > rightDepth ? leftDepth+1:rightDepth+1;
		
		//判断当前子树的左右深度是否比最远距离lenth大，大则替换；
		int tmp = leftDepth+rightDepth;
		if(tmp > maxlenth)
			maxlenth = tmp;

		return depth;
	}
};




int main()
{
	//根据给出的序列建一颗二叉树，其中'#'代表非法值。即用来表示NULL；
	//给出两组测试数据
	//int array[15] = {1,2,'#',1,3,'#','#',4,5,'#',6,'#',7,'#','#',8};
	int array[15] = {1,2,1,3,'#','#',4,5,'#',6,'#',7,'#','#',8};
	BinaryTree b(array,15);

	b.MaxDistant();
	system("pause");
	return 0;
}
