5. 将二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。

//类似线索化二叉树

//struct Node
//{
//	int _data;
//	Node* _left;
//	Node* _right;
//
//	Node(const int& data):_data(data),_left(NULL),_right(NULL){}
//};
//
//class SBTree
//{
//public:
//	SBTree(int* arr,const int size)
//		:_root(NULL)
//	{
//		for(int i = 0; i < size; ++i)
//			Insert(arr[i]);
//	}
//
//	void Insert(const int data)
//	{
//		if(_root == NULL)
//			_root = new Node(data);
//		else
//			_Insert(data);
//	}
//
//	//利用中序递归
//	Node* TurnToList()
//	{
//		Node* prev = NULL;
//		_TurnToList(_root,prev);
//
//		Node* cur = _root;
//		while(cur && cur->_left)
//			cur = cur->_left;
//
//		return cur;
//	}
//
//
//	//遍历
//	void Order()
//	{
//		Node* cur = TurnToList();
//
//		while(cur)
//		{
//			cout<<cur->_data<<" ";
//			cur = cur->_right;
//		}
//		cout<<endl;
//	}
//protected:
//	void _TurnToList(Node* root, Node*& prev)
//	{
//		if(root == NULL)
//			return;
//
//		_TurnToList(root->_left,prev);
//		if(prev != NULL)
//			prev->_right = root;
//		prev = root;
//		_TurnToList(root->_right,prev);
//	}
//
//	bool _Insert(const int data)
//	{
//		Node* cur = _root;
//		Node* parent = NULL;
//		while(cur)
//		{
//			parent = cur;
//			if(cur->_data == data)
//				return false;
//
//			if(cur->_data > data)
//				cur = cur->_left;
//			else
//				cur = cur->_right;
//		}
//
//		cur = new Node(data);
//
//		if(parent->_data > data)
//			parent->_left = cur;
//		else
//			parent->_right = cur;
//	}
//private:
//	Node* _root;
//};
//
//int main()
//{
//	int arr[10] = {2,5,9,0,1,3,6,7,8,4,};
// 	SBTree tree(arr,10);
//
//	tree.Order();
//
//	system("pause");
//	return 0;
//}