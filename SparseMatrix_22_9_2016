# Data-structure
data   structure
稀疏矩阵的压缩存储


什么是稀疏矩阵？ 

/* 这是大学的以么课《线性代数》学的，不知道大家还记得多少，在老师讲到实现稀疏矩阵的压缩存储的时候，我知记得
我当时考了75分，其它的就呵呵了-_-!!!  

言归正传，稀疏矩阵，例如：
--------------
0 0 2 0 4
0 0 0 0 0
0 1 0 3 0
5 0 6 0 0
--------------
上面这个就是稀疏矩阵，仔细观察，好像没什么规律吧，而且，习惯上我们把非 0 数据称为有效数据，在这个矩阵中，明显
0要比有效数据多不少，这就是我么为什么要对它以上所存储了；  避免浪费嘛！   高效率，低消耗是我们程序员追求的完美！

那么，问题来了，前面我们讲过关于对称矩阵的压缩存储（博客链接），用一维数组存储下三角数据，那么这里该怎么存？
相信大家都可以第一时间反应过来，把有效数据都拿出来存储不就好了嘛，对，就是这样，那么稀疏矩阵的有效数据是无规律的，
我们是不是还得把它们的坐标也存储起来，否则是不是找不到了。。。。。这块有一个对象有三个属性都要存起来，我们用什么
好呢？       结构体，没问题，这里我选择用结构体来存储单独的数据，而vector（顺序表）存储这些结构体，当然，并不是每个
无效值都是0，我们还需要一个变量来表示我们的无效值，好了，，，框架成形了，，，来实现代码吧！

-------------------------------------------

*/

#include<iostream>
#include<vector>

using namespace std;


template<class T>
struct Triple      //保存数据的结构体
{
         size_t _row;
         size_t _col;
         T _data;

         Triple(size_t row = 0, size_t col = 0, const T& x = T())
                :_row( row)
                ,_col( col)
                ,_data( x)
        {}
};

template<class T>
class SparseMatrix
{
public:
         SparseMatrix(T * arr, size_t m , size_t n, const T& invalid) //注意传参的含义
                :_m( m)
                ,_n( n)
                ,_invalid( invalid)
        {
                将有效数据都存入vector内;
                 for(size_t i = 0; i < _m; i++)
                {
                         for(size_t j = 0; j < _n; j++)
                        {
                                 if(arr [i*n + j] != _invalid) //有效数据的判定条件；
                                {
                                         Triple<T > tmp(i,j,arr[i* n + j]);
                                        _martix.push_back(tmp);
                                }
                        }
                }
        }

         打印稀疏矩阵--就是从压缩存储还原的过程；

         void Display()
        {
                 int index = 0;

                 for(size_t i = 0; i < _m; i++)
                {
                         for(size_t j = 0; j < _n; j++)
                        {
                                 if( index < _martix.size()&& 
                                        _martix[index]._row == i&&
                                        _martix[index]._col == j)//判断该位置是否放置有效数据；
                                {
                                        cout<<_martix[index++]._data<< " ";
                                }
                                 else   //否则该位置放置无效数据
                                        cout<<_invalid<< " ";
                        }
                        cout<<endl;
                }
                cout<<endl;
        }

private:
        size_t _m;  //矩阵的行数
         size_t _n;  //矩阵的列数
         T _invalid; //无效数据
         vector<Triple <T> > _martix;   //保存数据所有结构体的vector
};


void  testSparseMatrix()
{
         int a[6][5] =   //测试用例
        {{1, 0, 3, 0, 5},
        {0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0},
        {2, 0, 4, 0, 6},
        {0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0}};

         SparseMatrix<int >  s((int *)a, 6, 5, 0); //注意类参数是一维数组指针，强制转换；

        s.Display ();
}

int main()
{
        testSparseMatrix();

        system( "pause");
         return 0;
}
