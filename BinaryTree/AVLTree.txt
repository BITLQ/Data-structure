#include<iostream>

using namespace std;

template<class K, class V>
struct AVLTreeNode
{
	K _key;
	AVLTreeNode<K, V>* _left;
	AVLTreeNode<K, V>* _right;
	AVLTreeNode<K, V>* _parent;
	V _value;

	int bf;        //平衡因子
	
	AVLTreeNode(const K& key , const V& value)
		:_key(key)
		,_left (NULL)
		,_right (NULL)
		,_parent(NULL)
		,_value(value)
		,bf(0)
	{}
};

template<class K, class V>
class AVLTree
{
public:
	typedef AVLTreeNode <K,V> Node;

	AVLTree()
		:_root(NULL)
	{}

	bool Insert(const K& key, const V& value)
	{
		return _Insert(key, value);
	}

	void Inorder()
	{
		_Inorder(_root);
	}

	//判断一棵树是否平衡
	bool IsBanlancePR()
	{
		//判断左右子树的高度差是否在AVL树的范围内
		int heigh = 0;
		return _IsBanlance(_root, heigh);
	}
protected:

	bool _IsBanlance(Node* root, int& heigh)
	{
		if(root == NULL)
			return true;

		int leftheigh = heigh;
		if( _IsBanlance (root->_left , leftheigh) == false )
			return false;

		int rightheigh = heigh;
		if( _IsBanlance (root->_right , rightheigh) == false)
			return false;
		
		heigh = leftheigh > rightheigh ? leftheigh+1 : rightheigh+1;

		return abs(rightheigh - leftheigh) < 2;
	}

	//中序遍历
	void _Inorder(Node* root)
	{
		if(root == NULL)
			return;

		_Inorder(root->_left);
		cout<<root->_key <<" ";
		_Inorder(root->_right);
	}
	//AVL树是搜索二叉树的一种延伸；
	//AVL树是左右子树高度差的绝对值小于等于1的树；
	//插入元素思路

	bool _Insert(const K& key, const V& value)
	{
		if(_root == NULL)
		{
			//如果树为NULL，则新插入元素为根节点；
			_root = new Node(key, value);
			return true;
		}

		//如果树不为NULL,找到合适的插入位置；
		Node* cur = _root;
		Node* parent = NULL;
		while(cur)
		{
			parent = cur;
			if(cur->_key < key)
				cur =cur->_right;
			else if(cur->_key > key)
				cur = cur->_left;
			else
				return false;
		}

		//将新元素插入树中,并且改变平衡因子的值；

		//右边
		Node* newNode = new Node(key, value);
		if(parent->_key < key)
		{
			parent->_right = newNode;
			parent->bf ++;
		}
		//左边
		else
		{
			parent->_left = newNode;
			parent->bf --;
		}
		newNode->_parent = parent;

		//parent = newNode;
		_Rotate(parent);

		return true;
	}

	//调整函数  
	void  _Rotate(Node* parent)
	{
		while(parent->_parent )
		{	
			if(parent->bf == 0 || abs(parent->bf ) > 1)
				break;

			if(parent->_parent ->_left == parent)
				parent->_parent ->bf --;
			else if(parent->_parent ->_right == parent)
				parent->_parent ->bf ++;

			parent = parent->_parent ;
		}
			//while( parent->_parent && abs(parent->bf) < 2 )
			//{
			//	if(parent->bf == 0)   //高度差为0，不再调整；
			//		break;
			//	if(parent->_parent->_left == parent)
			//		--parent->_parent ->bf;
			//	else
			//		++parent->_parent ->bf;

			//	parent = parent->_parent ;
			//
			//}
		if(parent == NULL)
			return ;

			if(parent->bf == -2 && parent->_left ->bf == -1)
				 _RotateR(parent);
			else if(parent->bf == -2 && parent->_left ->bf == 1)
				 _RotateLR(parent);
			else if(parent->bf == 2 && parent->_right ->bf == -1)
				 _RotateRL(parent);
			else if(parent->bf == 2 && parent->_right ->bf == 1)
				 _RotateL(parent);
	}

	//左旋 
	void _RotateL(Node* parent)
	{
		Node* subR = parent->_right ;  //右子树
		Node* subRL = subR->_left ;     //右子树的左孩子；

		parent->_right = subRL;
		if(subRL)
			subRL->_parent = parent;

		subR->_left = parent;
		Node* ppNode = parent->_parent ;
		parent->_parent = subR;

		if(ppNode == NULL)
			_root = subR;
		else if(ppNode->_left == parent)
				ppNode->_left = subR;
		else
			ppNode->_right = subR;
		
		subR->_parent = ppNode;

		//改变平衡因子
		parent->bf = subR->bf = 0;
	}

	//右旋
	void _RotateR(Node* parent)
	{
		Node* subL = parent->_left ;  //左子树
		Node* subLR = subL->_right ;   //左子树的右子树

		parent->_left = subLR;
		if(subLR)
			subLR->_parent = parent;

		subL->_right = parent;
		Node* ppNode = parent->_parent ;
		parent->_parent = subL;

		if(ppNode == NULL)
			_root = subL;

		else if(ppNode ->_left == parent)
			ppNode->_left = subL;
		else
			ppNode->_right = subL;
			
		subL->_parent = ppNode;
		//重置parent 和 subl的平衡因子

		parent->bf = subL->bf = 0;

	}

	//左右双旋
	void _RotateLR(Node* parent)
	{
		Node* subL = parent->_left ;
		Node* subLR = subL->_right ;

		int bf = subLR->bf ;

		_RotateL(parent->_left);
		_RotateR(parent);

		if(bf == 0)
			parent->bf = subL->bf = 0;
		else if(bf == -1)
		{
			parent->bf = 1;
			subL->bf = 0;
		}
		else
		{
			parent->bf = 0;
			subL->bf = -1;
		}

		subLR->bf = 0;
	}

	//右左双旋
	void _RotateRL(Node* parent)
	{
		Node* subR =  parent->_right ;
		Node* subRL = subR->_left ;
		int bf = subRL->bf ;

		_RotateR(parent->_right);
	    _RotateL(parent);

		if(bf == 0)
			parent->bf = subR->bf = 0;
		else if(bf == -1)
		{
			parent->bf = 0;
			subR->bf = 1;
		}
		else
		{
			parent->bf = -1;
			subR->bf = 0;
		}
	}
private:
	Node* _root;
};

int main()
{
	AVLTree<int,int> t;
	int arr[] = {4, 2, 6, 1, 3, 5, 15, 7, 16, 14};

	for(size_t i = 0; i < sizeof(arr)/sizeof(arr[0]); i++ )
		t.Insert (arr[i], i);

	t.Inorder ();
	cout<<endl;
	cout<<t.IsBanlancePR ()<<endl;

	system("pause");
	return 0;
}