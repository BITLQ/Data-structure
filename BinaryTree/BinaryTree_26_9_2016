# Data-structure
data   structure
#include<iostream>
#include<cassert>

using namespace std;

//二叉树

template<class T>
struct BinaryNode
{
	T _data;
	BinaryNode* _left;
	BinaryNode* _right;

	BinaryNode (const T& x)
		:_data(x)
		,_left (NULL)
		,_right (NULL)
	{}

};


template<class T>
class BinaryTree
{
public:
	typedef BinaryNode<T>* Node;

	BinaryTree ()
		:_root(NULL)
	{}
	BinaryTree (T* a, size_t size, const T& invalid)
	{
		assert(a);
		size_t index = 0;
		_root = GreateTree(a, size, invalid, index);
	}

	BinaryTree (const BinaryTree <T>& tree)
	{

		_root = new BinaryNode <T>(tree._root->_data);
		
		Node root = tree._root ;

		_BinaryTree(_root,root);
	}

	~BinaryTree ()
	{
		_Delete(_root);
	}

	//前序遍历
	void PrevOrder()
	{
		_PrevOrder(_root); 
		cout<<endl;
	}

	//中序遍历
	void InOrder()
	{
		_InOrder(_root);
		cout<<endl;
	}

	//后序遍历
	void PostOrder()
	{
		_PosOrder(_root);
		cout<<endl;
	}

	//层序遍历     使用queue;
	void LevelOrder()
	{

	}

	//求节点个数
	size_t Size()
	{
		
		if(_root == NULL)
			return 0;

		size_t count = 1;

		_Size(_root, count);
		return count;
	}

	//求二叉树深度
	size_t Depth()
	{
		if(_root == NULL)
			return 0;

		size_t dep = _Depth(_root);  //表示深度的变量

		return dep;
	}



protected :

	//析构
	void _Delete(Node root)
	{
		if(root->_left )
		{
			Node tmp = root->_left ;
			_Delete(tmp);
		}

		if(root->_right )
		{
			Node tmp = root->_right ;
			_Delete (tmp);
		}

		if(root)
		delete root;
		cout<<"析构了"<<endl;
	}

	//拷贝构造
	void _BinaryTree(Node myroot, Node otherroot)
	{
		if(otherroot->_left != NULL)
		{
			myroot->_left = new BinaryNode <T>(otherroot ->_left->_data  );
			_BinaryTree(myroot->_left , otherroot ->_left );
		}
		if(otherroot ->_right != NULL)
		{
			myroot ->_right = new BinaryNode <T>(otherroot ->_right ->_data );
			_BinaryTree (myroot ->_right ,otherroot ->_right );
		}
	}


	//深度
	size_t _Depth(Node root)
	{
		size_t lefttmp = 1;
		size_t righttmp = 1;
		if(root->_left != NULL)
		{
			lefttmp += _Depth (root->_left );
		}
		if(root->_right != NULL)
		{
			righttmp += _Depth(root->_right );
		}

		return lefttmp >righttmp ? lefttmp : righttmp ;
	}

	//节点个数
	size_t _Size(Node root, size_t& count)
	{
		if(root->_left != NULL)
		{
			count++;
			_Size(root->_left , count);
		}
		if(root->_right != NULL)
		{
			count++;
			_Size(root->_right , count);
		}

		return count;
	}

	//后序遍历
	void _PosOrder(Node root)
	{
		if(root == NULL)
			return;
		_PosOrder (root->_left );
		_PosOrder (root->_right );
		cout<<root->_data <<" ";
	}

	//中序遍历
	void _InOrder(Node root)
	{
		if(root ==  NULL)
			return;

		_InOrder(root->_left);
		cout<<root->_data <<" ";
		_InOrder(root->_right);
	}

	//前序遍历
	void _PrevOrder(Node root)
	{
		if(root == NULL)
			return;
		
		cout<<root->_data <<" ";

		_PrevOrder(root->_left);
		_PrevOrder (root->_right );
	}

	//构造函数
	Node GreateTree(T* a, size_t size, const T& invalid, size_t& index)
	{
		Node root = NULL;

		if(index < size && a[index] != invalid )
		{
			root = new BinaryNode<T>(a[index]);
			root->_left = GreateTree(a, size, invalid, ++index);
			root->_right = GreateTree(a,size, invalid, ++index);
		}
		return root;
	}

private:
	Node _root;
};


void TestBinaryTree()
{
	//int array[10] = {1,2,3,'#','#',4,'#','#',5, 6 };
	//int array[2] = {1,2};
	int array[13] = {1,2,3,'#','#',4,'#','#',5, 6,7,'#',8 };

	//BinaryTree<int> t(array, 10, '#');
	BinaryTree<int> t(array, 13, '#');

	//前序遍历：1 2 3 4 5 6 
	//中序遍历：3 2 4 1 6 5
	//后序遍历：3 4 2 6 5 1

	/*t.PrevOrder ();
	t.InOrder ();
	t.PostOrder ();
	cout<<t.Size ()<<endl;
	cout<<t.Depth ()<<endl;*/

	/*BinaryTree<int> t2(t);
	t2.PrevOrder ();*/
}


int main()
{
	TestBinaryTree ();

	system("pause");
	return 0;
}
