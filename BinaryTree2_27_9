# Data-structure
data   structure
#include<iostream>
#include<cassert>
#include<queue>
#include<stack>

using namespace std;
//二叉树


template<class T>
struct BinaryNode
{
	T _data;
	BinaryNode* _left;
	BinaryNode* _right;

	BinaryNode (const T& x)
		:_data(x)
		,_left (NULL)
		,_right (NULL)
	{}

};

template <class T>
struct SNode
{
	BinaryNode<T>* node;
	size_t flag ;

	SNode(BinaryNode<T>* s, int x)
		:node(s)
		,flag(x)
	{}
};

template<class T>
class BinaryTree
{
public:
	typedef BinaryNode<T>* Node;

	BinaryTree ()
		:_root(NULL)
	{}
	BinaryTree (T* a, size_t size, const T& invalid)
	{
		assert(a);
		size_t index = 0;
		_root = GreateTree(a, size, invalid, index);
	}

	BinaryTree (const BinaryTree <T>& tree)
	{

		_root = new BinaryNode <T>(tree._root->_data);
		
		Node root = tree._root ;

		_BinaryTree(_root,root);
	}

	//析构函数
	~BinaryTree ()
	{
		_Delete(_root);
	}

	//前序遍历
	void PrevOrder()
	{
		_PrevOrder(_root); 
		cout<<endl;
	}

	//前序遍历的非递归实现
	void PrevOrder2()
	{
		stack<Node> s;
		Node cur = _root;

		while(cur || !s.empty ())
		{
			while(cur)
			{
				cout<<cur->_data <<" ";
				s.push (cur );
				cur = cur->_left ;
			}

			Node tmp = s.top ();
			s.pop();

			cur = tmp->_right;
		}
		cout<<endl;
	}


	//中序遍历
	void InOrder()
	{
		_InOrder(_root);
		cout<<endl;
	}

	//中序遍历的非递归实现
	void Inorder2()
	{
	    stack<Node> s;
		Node cur = _root;

		while(cur || !s.empty ())
		{
			while(cur)
			{
				s.push (cur );
				cur = cur->_left ;
			}
       
			Node tmp = s.top ();
			cout<<tmp->_data <<" ";
			s.pop();

			cur = tmp->_right;
		}
		cout<<endl;
	}

	//后序遍历
	void PostOrder()
	{
		_PosOrder(_root);
		cout<<endl;
	}

	//后序遍历的非递归实现
	void PostOrder2()
	{
		stack<SNode<T>> s;
		Node cur = _root;

		while(cur)
		{
			SNode <T> sn(cur, 0);
			s.push(sn);
			cur = cur->_left ;
		}

		while(!s.empty ())
		{
			SNode <T> sn = s.top ();

			if(!sn.node ->_right || sn.flag  )
			{
				cout<<sn.node ->_data <<" ";
				s.pop ();
			}

			else
			{
				sn.flag = 1;

				sn.node = sn.node ->_right ;
				while(sn.node )
				{
					SNode<T> tmp(sn.node ->_right,0) ;
					s.push (tmp);
					sn.node = sn.node ->_left  ;
				}
			}
		}
	}

	//层序遍历     使用queue;
	void LevelOrder()
	{
		queue<Node> q;
		q.push (_root);
		_LevelOrder( q);

		cout<<endl;
	}

	//求节点个数
	size_t Size()
	{
		
		if(_root == NULL)
			return 0;

		size_t count = 1;

		_Size(_root, count);
		return count;
	}

	//求二叉树深度
	size_t Depth()
	{
		if(_root == NULL)
			return 0;

		size_t dep = _Depth(_root);  //表示深度的变量

		return dep;
	}

	//第k层有多少结点？
	size_t KOfNode(size_t k)//第一种方法，感觉有些麻烦；
	{
		
		size_t dep = Depth();
		assert(k <= dep);

		size_t count = 0;
		if(k != 0)
	    _KOfNode(_root, count, --k);
		return count;
	}


protected :

	//求第k层的结点数  第一种想到的方法  很麻烦
	void _KOfNode(Node root, size_t& count,size_t k)
	{
		if(root)
		{
			if(k==0)
			{
				count+=1;
				return;
			}
		}

		if(!root)
			return;

		_KOfNode (root->_left , count, --k);
		++k;
	    _KOfNode (root->_right, count, --k);
	}

	//层序遍历
	void _LevelOrder(queue<Node>& q)
	{
		if(!q.empty ())
		{
			Node tmp = q.front();
		    if(tmp->_left )
			q.push (tmp->_left );
		    if(tmp->_right )
			q.push (tmp->_right);

		    cout<<tmp->_data<<" ";

		    q.pop();

		   _LevelOrder (q);
		}
	}

	//析构
	void _Delete(Node root)
	{
		if(root->_left )
		{
			Node tmp = root->_left ;
			_Delete(tmp);
		}

		if(root->_right )
		{
			Node tmp = root->_right ;
			_Delete (tmp);
		}

		if(root)
		delete root;
		cout<<"析构了"<<endl;
	}

	//拷贝构造
	void _BinaryTree(Node myroot, Node otherroot)
	{
		if(otherroot->_left != NULL)
		{
			myroot->_left = new BinaryNode <T>(otherroot ->_left->_data  );
			_BinaryTree(myroot->_left , otherroot ->_left );
		}
		if(otherroot ->_right != NULL)
		{
			myroot ->_right = new BinaryNode <T>(otherroot ->_right ->_data );
			_BinaryTree (myroot ->_right ,otherroot ->_right );
		}
	}


	//深度
	size_t _Depth(Node root)
	{
		size_t lefttmp = 1;
		size_t righttmp = 1;
		if(root->_left != NULL)
		{
			lefttmp += _Depth (root->_left );
		}
		if(root->_right != NULL)
		{
			righttmp += _Depth(root->_right );
		}

		return lefttmp >righttmp ? lefttmp : righttmp ;
	}

	//节点个数
	size_t _Size(Node root, size_t& count)
	{
		if(root->_left != NULL)
		{
			count++;
			_Size(root->_left , count);
		}
		if(root->_right != NULL)
		{
			count++;
			_Size(root->_right , count);
		}

		return count;
	}

	//后序遍历
	void _PosOrder(Node root)
	{
		if(root == NULL)
			return;
		_PosOrder (root->_left );
		_PosOrder (root->_right );
		cout<<root->_data <<" ";
	}

	//中序遍历
	void _InOrder(Node root)
	{
		if(root ==  NULL)
			return;

		_InOrder(root->_left);
		cout<<root->_data <<" ";
		_InOrder(root->_right);
	}

	//前序遍历
	void _PrevOrder(Node root)
	{
		if(root == NULL)
			return;
		
		cout<<root->_data <<" ";

		_PrevOrder(root->_left);
		_PrevOrder (root->_right );
	}

	//构造函数
	Node GreateTree(T* a, size_t size, const T& invalid, size_t& index)
	{
		Node root = NULL;

		if(index < size && a[index] != invalid )
		{
			root = new BinaryNode<T>(a[index]);
			root->_left = GreateTree(a, size, invalid, ++index);
			root->_right = GreateTree(a,size, invalid, ++index);
		}
		return root;
	}

private:
	Node _root;
};
