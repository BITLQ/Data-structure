#include<iostream>
#include<vector>
#include<string>

//闭散列法/开放定址法解决哈希冲突
using namespace std;

enum Status
{
	EXISIT,//存在
	DELETE,//删除
	EMPTY//空
};

template<class K>
struct _HashFunc
{
	size_t operator()(const K& key)
	{
		return key;
	}
};

template<>
struct _HashFunc<string>
{
	size_t operator()(const string& str)
	{
		unsigned int seed= 131;// 31 131 1313 13131 131313    
			unsigned int hash= 0; 
			char* tmp = const_cast<char*>(str.c_str());

			while(*tmp)    
			{        
				hash = hash*seed+ (*tmp++);    
			}    

			return(hash& 0x7FFFFFFF); 
	}
};
template<class K,class V>
struct HashNode
{
	K _key;
	V _value;

	Status _status;

	HashNode(const K& key = K(),const V& value = V())
		:_key(key)
		,_value(value)
		,_status(EMPTY)
	{}

};


template<class K,class V,class HashFunc = _HashFunc<K>>
class HashTable
{
public:
	typedef HashNode<K,V> Node;

	HashTable()
		:_size(0)
	{
		_table.resize(_GetNextPrime(0));
	}

	~HashTable()
	{}

	bool Insert(const K& key,const V& value)
	{
		//表中插入元素；key是唯一的，采用除留余数法；
		//加入负载因子；

		//判断是否需要增容
		_CheckSize();

		//需要判断key值是否有重复
		for(size_t i = 0; i < _table.size(); i++)
		{
			if(_table[i]._status == EXISIT 
				&&_table[i]._key == key)
				return false;
		}
		 size_t index = _HashFunc(key);

		 _table[index]._key = key;
		 _table[index]._value = value;
		 _table[index]._status = EXISIT;
		 _size++;

		 return true;
	}

	bool Remove(const K& key)
	{
		//在表中找到key就停止，若找到EMPTY则停止
		//懒删除法:就是只改变状态，不修改值，采用后来者覆盖的形式；
		size_t i = HashFunc()(key)%_table.size();

		if(_table[i]._status==EXISIT 
			&&_table[i]._key == key)
		{
			//找到，并且可以删除
			_table[i]._status = DELETE;
			--_size;

			return true;
		}
		size_t count = 0;

		while(count != _table.size() - 1 || _table[i]._status != EMPTY)
		{
			count++;
			if(i == _table.size() - 1)
				i = 0;
			if(_table[i]._status == EXISIT && _table[i]._key == key)
			{
				_table[i]._status = DELETE;
				--_size;

				return true;
			}
			++i;
		}

		return false;
	}

	Node* Find(const K& key)
	{
		size_t i = HashFunc()(key)%_table.size();

		if(_table[i]._status == EXISIT && _table[i]._key == key)
			return &_table[i];
		
		size_t count = 0;

		while(count != _table.size() - 1 || _table[i]._status != EMPTY)
		{
			count++;
			if(i == _table.size() - 1)
				i = 0;
			if(_table[i]._status == EXISIT && _table[i]._key == key)
			{
				_table[i]._status = DELETE;
				--_size;

				return &_table[i];
			}
			++i;
		}

		return NULL;
	}
protected:

	size_t _GetNextPrime(const size_t size)
	{
		 //使用素数表对齐做哈希表的容量，降低哈希冲突 
	    const int _PrimeSize= 29; 
		static const unsigned long _PrimeList[_PrimeSize] =   {1ul,53ul,97ul,193ul,389ul,769ul,1543ul,3079ul,6151ul,12289ul,24593ul
		,49157ul,98317ul,196613ul,393241ul,786433ul,1572869ul,3145739ul,6291469ul
		,12582917ul,25165843ul,50331653ul,100663319ul,201326611ul,402653189ul,805306457ul
		,1610612741ul,3221225473ul,4294967291ul};

		for(size_t i = 0; i < 29; i++ )
		{
			if(size < _PrimeList[i])
				return _PrimeList[i];
		}

	}

	void _CheckSize(void)
	{
		if(_table.size() == 0 || _size*10/_table.size() >= 8)
		{
			//负载因子如果超过0.8，则进行扩容；
			size_t newsize = _GetNextPrime(_table.size());

			HashTable<K,V> ht;
			ht._table.resize(newsize);

			for(size_t i = 0; i < _table.size(); i++)
			{
				if(_table[i]._status == EXISIT)
					ht.Insert(_table[i]._key,_table[i]._value);
			}

			swap(ht._table,this->_table);
		}
	}

	size_t _HashFunc(const K& key)
	{
		size_t index = HashFunc()(key)%_table.size();

		 //线性探测解决哈希冲突
		 //哈希冲突：通过哈希函数返回的下标内已经有了一个key，产生哈希冲突

		while(1)
		{
			if(_table[index]._status == EMPTY || _table[index]._status == DELETE)
				return index;
			else
			{
				if(index == _table.size() - 1)
				index = 0;
				
				else
					index++;
			}
		}
	}

private:
	vector<Node> _table;
	size_t _size;
};


void TestHashTable(void)
{
	//int arr[] = {89, 66, 99, 58};

	/*HashTable<string, int> ht;

	for(size_t i = 0; i < sizeof(arr)/sizeof(arr[0]); i++)
		ht.Insert(arr[i],i);
	ht.Remove(66);
	cout<<ht.Remove(22)<<endl;
	ht.Insert(66,3);
	
	HashNode<int,int>* node = ht.Find(66);
	cout<<node->_key<<endl;*/

	char* arr[] = {"sort","sort","test","solo"};

	HashTable<string, int> ht;

	for(size_t i = 0; i < sizeof(arr)/sizeof(arr[0]);i++)
		ht.Insert(arr[i],i);

	ht.Remove("sort");
}
