# Data-structure
data   structure

//#include<iostream>
//#include<cassert>
//#include<vector>
//
////1.实现堆，向上调整，向下调整
//
////2.利用堆实现优先级队列
////3.用仿函数实现大堆小堆
//
////4.1000个数找出前十个最大的数
////5.堆排序
//
//using namespace std;
//
//template<class T>
//struct Max
//{
//	bool operator()(const T& x,const T& y)
//	{
//		return x > y;
//	}
//};
//
//
//template<class T>
//struct Min
//{
//	bool operator()(const T& x, const T& y)
//	{
//		return x < y;
//	}
//};
//
//template<class T, class Campare = Max<T>>
//class Heap         //左右孩子都是大堆
//{
//public:
//	//构造函数
//	Heap(T* arr,  int size)
//	{
//		_varr.resize(size);  //增加容量
//
//		for(int i = 0; i < size; i++ )
//			_varr[i] = arr[i];
//		//建堆
//		for(int i = (size - 1)/2; i >= 0; i--)
//		{
//			_AdJustDown( size, i);
//		}
//	}
//
//	//size
//	size_t Size()
//	{
//		return _varr.size ();
//	}
//
//	//插入一个元素；
//	//插入一个元素到最后，影响的只有它的祖先，然后利用向上调整；
//	//时间复杂度：
//	void Push(const T& x)
//	{
//		_varr.push_back(x);
//		_AdJustUp(_varr.size ());
//	}
//
//	//删除一个元素
//	//一般删除堆顶元素，采用的方法是将堆顶元素和最后一个元素交换，然后删除最后一个元素，
//	//再用向下调整；
//	//时间复杂度：
//	void Pop()
//	{
//		assert(_varr.size ());
//
//		swap(_varr[0], _varr[_varr.size() - 1]);
//		_varr.pop_back ();
//
//		_AdJustDown (_varr.size(), 0);
//	}
//
//	const T& top()
//	{
//		assert(_varr.size ());
//		return _varr[0];
//	}
//
//protected:
//
//	////向下调整
//	//void _AdJustDown(const int size, int i)
//	//{
//	//	int parent = i;
//	//	int child = parent*2 + 1;
//
//	//	while(child < size)
//	//	{
//	//		if(child + 1 < size && _varr[child] < _varr[child+1])
//	//			child += 1;
//	//		if(_varr[child] > _varr[parent])
//	//		{
//	//			swap(_varr[child],_varr[parent]);
//	//			parent = child;
//	//			child = parent*2 + 1;
//	//		}
//
//	//		else
//	//			break;
//	//	}
//	//}
//
//	//加入仿函数的向下调整
//	void _AdJustDown(const int size, int i)
//	{
//		int parent = i;
//		int child = parent*2 + 1;
//
//		while(child < size)
//		{
//			if(child + 1 < size && Campare()(_varr[child + 1],_varr[child]))
//				child += 1;
//
//			if(Campare()(_varr[child],_varr[parent]))
//			{
//				swap(_varr[child],_varr[parent]);
//				parent = child;
//				child = parent*2 + 1;
//			}
//
//			else
//				break;
//		}
//	}
//
//    //加入仿函数的向上调整
//	void _AdJustUp(const int size)
//	{
//		int child = size - 1;
//		while(child)
//		{
//			int parent = (child  - 1)/2;
//			if(Campare()(_varr[child],_varr[parent]))
//			{
//				swap(_varr[child],_varr[parent]);
//				child = parent;
//			}
//			else
//				break;
//		}
//	}
//
//	//向上调整
//	/*void _AdJustUp(const int size)
//	{
//		int child = size - 1;
//		while(child)
//		{
//			int parent = (child  - 1)/2;
//			if(_varr[child] > _varr[parent])
//			{
//				swap(_varr[child],_varr[parent]);
//				child = parent;
//			}
//			else
//				break;
//		}
//	}*/
//
//private:
//	vector<T> _varr;   //直接用vector
//};
//
//
////用堆实现优先级队列
//*
//
//优先级队列：
//即优先级队列（priority queue） 是0个或多个元素的集合，每个元素都有一个优先权
//，对优先级队列执行的操作有（1）查找（2）插入一个新元素 （3）删除 一般情况下，
//查找操作用来搜索优先权最大的元素，删除操作用来删除该元素 。对于优先权相同的元素，
//可按先进先出次序处理或按任意优先权进行。
//
//我们这里就不用进行查找了，因为直接利用了最大堆和最小堆的特性；
//
//*/
//template<class T,class Campare = Max<T>>
//class PQueue
//{
//public:
//	PQueue(T* arr, size_t size):_heap(arr,size){}
//
//	void Push(const T& x)
//	{
//		_heap.Push (x);
//	}
//
//	void Pop()
//	{
//		_heap.Pop ();
//	}
//
//	const T& top()
//	{
//		assert(_heap.Size ());
//		return _heap.top ();
//	}
//private:
//	Heap<T,Campare> _heap;
//};
//
//int main()
//{
//	int a [] = {10,11, 13, 12, 16, 18, 15, 17, 14, 19};
//
//	//Heap<int,Min<int>> t(a,10);
//	//Heap<int,Max<int>> t(a,10);
//	//t.Push (30);
//	//t.Pop ();
//
//	PQueue<int,Min<int>> q(a,10);
//	q.Push (30);
//	q.Pop ();
//	q.top ();
//
//	system("pause");
//	return 0;
//}
